package net.opentrends.training.service.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.opentrends.training.service.model.Employee;
import net.opentrends.training.service.model.EmployeeModel;
import net.opentrends.training.service.model.EmployeeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Employee service. Represents a row in the &quot;TestPortlet_Employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.opentrends.training.service.model.EmployeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeImpl
 * @see net.opentrends.training.service.model.Employee
 * @see net.opentrends.training.service.model.EmployeeModel
 * @generated
 */
@JSON(strict = true)
public class EmployeeModelImpl extends BaseModelImpl<Employee>
    implements EmployeeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a employee model instance should use the {@link net.opentrends.training.service.model.Employee} interface instead.
     */
    public static final String TABLE_NAME = "TestPortlet_Employee";
    public static final Object[][] TABLE_COLUMNS = {
            { "employeeId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "employeeName", Types.VARCHAR },
            { "employeeDesignation", Types.VARCHAR },
            { "address", Types.VARCHAR },
            { "email", Types.VARCHAR },
            { "phoneNumber", Types.VARCHAR },
            { "fileEntryId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table TestPortlet_Employee (employeeId LONG not null primary key,groupId LONG,employeeName VARCHAR(75) null,employeeDesignation VARCHAR(75) null,address VARCHAR(75) null,email VARCHAR(75) null,phoneNumber VARCHAR(75) null,fileEntryId LONG)";
    public static final String TABLE_SQL_DROP = "drop table TestPortlet_Employee";
    public static final String ORDER_BY_JPQL = " ORDER BY employee.employeeId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY TestPortlet_Employee.employeeId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.net.opentrends.training.service.model.Employee"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.net.opentrends.training.service.model.Employee"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.net.opentrends.training.service.model.Employee"),
            true);
    public static long GROUPID_COLUMN_BITMASK = 1L;
    public static long EMPLOYEEID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.net.opentrends.training.service.model.Employee"));
    private static ClassLoader _classLoader = Employee.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Employee.class
        };
    private long _employeeId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private String _employeeName;
    private String _employeeDesignation;
    private String _address;
    private String _email;
    private String _phoneNumber;
    private Long _fileEntryId;
    private long _columnBitmask;
    private Employee _escapedModel;

    public EmployeeModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Employee toModel(EmployeeSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Employee model = new EmployeeImpl();

        model.setEmployeeId(soapModel.getEmployeeId());
        model.setGroupId(soapModel.getGroupId());
        model.setEmployeeName(soapModel.getEmployeeName());
        model.setEmployeeDesignation(soapModel.getEmployeeDesignation());
        model.setAddress(soapModel.getAddress());
        model.setEmail(soapModel.getEmail());
        model.setPhoneNumber(soapModel.getPhoneNumber());
        model.setFileEntryId(soapModel.getFileEntryId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Employee> toModels(EmployeeSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Employee> models = new ArrayList<Employee>(soapModels.length);

        for (EmployeeSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _employeeId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setEmployeeId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _employeeId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Employee.class;
    }

    @Override
    public String getModelClassName() {
        return Employee.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("employeeId", getEmployeeId());
        attributes.put("groupId", getGroupId());
        attributes.put("employeeName", getEmployeeName());
        attributes.put("employeeDesignation", getEmployeeDesignation());
        attributes.put("address", getAddress());
        attributes.put("email", getEmail());
        attributes.put("phoneNumber", getPhoneNumber());
        attributes.put("fileEntryId", getFileEntryId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long employeeId = (Long) attributes.get("employeeId");

        if (employeeId != null) {
            setEmployeeId(employeeId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        String employeeName = (String) attributes.get("employeeName");

        if (employeeName != null) {
            setEmployeeName(employeeName);
        }

        String employeeDesignation = (String) attributes.get(
                "employeeDesignation");

        if (employeeDesignation != null) {
            setEmployeeDesignation(employeeDesignation);
        }

        String address = (String) attributes.get("address");

        if (address != null) {
            setAddress(address);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        String phoneNumber = (String) attributes.get("phoneNumber");

        if (phoneNumber != null) {
            setPhoneNumber(phoneNumber);
        }

        Long fileEntryId = (Long) attributes.get("fileEntryId");

        if (fileEntryId != null) {
            setFileEntryId(fileEntryId);
        }
    }

    @JSON
    @Override
    public long getEmployeeId() {
        return _employeeId;
    }

    @Override
    public void setEmployeeId(long employeeId) {
        _employeeId = employeeId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    @Override
    public String getEmployeeName() {
        if (_employeeName == null) {
            return StringPool.BLANK;
        } else {
            return _employeeName;
        }
    }

    @Override
    public void setEmployeeName(String employeeName) {
        _employeeName = employeeName;
    }

    @JSON
    @Override
    public String getEmployeeDesignation() {
        if (_employeeDesignation == null) {
            return StringPool.BLANK;
        } else {
            return _employeeDesignation;
        }
    }

    @Override
    public void setEmployeeDesignation(String employeeDesignation) {
        _employeeDesignation = employeeDesignation;
    }

    @JSON
    @Override
    public String getAddress() {
        if (_address == null) {
            return StringPool.BLANK;
        } else {
            return _address;
        }
    }

    @Override
    public void setAddress(String address) {
        _address = address;
    }

    @JSON
    @Override
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    @Override
    public void setEmail(String email) {
        _email = email;
    }

    @JSON
    @Override
    public String getPhoneNumber() {
        if (_phoneNumber == null) {
            return StringPool.BLANK;
        } else {
            return _phoneNumber;
        }
    }

    @Override
    public void setPhoneNumber(String phoneNumber) {
        _phoneNumber = phoneNumber;
    }

    @JSON
    @Override
    public Long getFileEntryId() {
        return _fileEntryId;
    }

    @Override
    public void setFileEntryId(Long fileEntryId) {
        _fileEntryId = fileEntryId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Employee.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Employee toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Employee) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EmployeeImpl employeeImpl = new EmployeeImpl();

        employeeImpl.setEmployeeId(getEmployeeId());
        employeeImpl.setGroupId(getGroupId());
        employeeImpl.setEmployeeName(getEmployeeName());
        employeeImpl.setEmployeeDesignation(getEmployeeDesignation());
        employeeImpl.setAddress(getAddress());
        employeeImpl.setEmail(getEmail());
        employeeImpl.setPhoneNumber(getPhoneNumber());
        employeeImpl.setFileEntryId(getFileEntryId());

        employeeImpl.resetOriginalValues();

        return employeeImpl;
    }

    @Override
    public int compareTo(Employee employee) {
        long primaryKey = employee.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Employee)) {
            return false;
        }

        Employee employee = (Employee) obj;

        long primaryKey = employee.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EmployeeModelImpl employeeModelImpl = this;

        employeeModelImpl._originalGroupId = employeeModelImpl._groupId;

        employeeModelImpl._setOriginalGroupId = false;

        employeeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Employee> toCacheModel() {
        EmployeeCacheModel employeeCacheModel = new EmployeeCacheModel();

        employeeCacheModel.employeeId = getEmployeeId();

        employeeCacheModel.groupId = getGroupId();

        employeeCacheModel.employeeName = getEmployeeName();

        String employeeName = employeeCacheModel.employeeName;

        if ((employeeName != null) && (employeeName.length() == 0)) {
            employeeCacheModel.employeeName = null;
        }

        employeeCacheModel.employeeDesignation = getEmployeeDesignation();

        String employeeDesignation = employeeCacheModel.employeeDesignation;

        if ((employeeDesignation != null) &&
                (employeeDesignation.length() == 0)) {
            employeeCacheModel.employeeDesignation = null;
        }

        employeeCacheModel.address = getAddress();

        String address = employeeCacheModel.address;

        if ((address != null) && (address.length() == 0)) {
            employeeCacheModel.address = null;
        }

        employeeCacheModel.email = getEmail();

        String email = employeeCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            employeeCacheModel.email = null;
        }

        employeeCacheModel.phoneNumber = getPhoneNumber();

        String phoneNumber = employeeCacheModel.phoneNumber;

        if ((phoneNumber != null) && (phoneNumber.length() == 0)) {
            employeeCacheModel.phoneNumber = null;
        }

        employeeCacheModel.fileEntryId = getFileEntryId();

        return employeeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{employeeId=");
        sb.append(getEmployeeId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", employeeName=");
        sb.append(getEmployeeName());
        sb.append(", employeeDesignation=");
        sb.append(getEmployeeDesignation());
        sb.append(", address=");
        sb.append(getAddress());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", phoneNumber=");
        sb.append(getPhoneNumber());
        sb.append(", fileEntryId=");
        sb.append(getFileEntryId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("net.opentrends.training.service.model.Employee");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>employeeId</column-name><column-value><![CDATA[");
        sb.append(getEmployeeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employeeName</column-name><column-value><![CDATA[");
        sb.append(getEmployeeName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employeeDesignation</column-name><column-value><![CDATA[");
        sb.append(getEmployeeDesignation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>address</column-name><column-value><![CDATA[");
        sb.append(getAddress());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>phoneNumber</column-name><column-value><![CDATA[");
        sb.append(getPhoneNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
        sb.append(getFileEntryId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
