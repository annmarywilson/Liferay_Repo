package net.opentrends.register.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.opentrends.register.model.Address;
import net.opentrends.register.model.AddressModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Address service. Represents a row in the &quot;StudentPortlet_Address&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.opentrends.register.model.AddressModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AddressImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AddressImpl
 * @see net.opentrends.register.model.Address
 * @see net.opentrends.register.model.AddressModel
 * @generated
 */
public class AddressModelImpl extends BaseModelImpl<Address>
    implements AddressModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a address model instance should use the {@link net.opentrends.register.model.Address} interface instead.
     */
    public static final String TABLE_NAME = "StudentPortlet_Address";
    public static final Object[][] TABLE_COLUMNS = {
            { "addressId", Types.BIGINT },
            { "studentId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "parentAddress", Types.VARCHAR },
            { "parentState", Types.VARCHAR },
            { "parentDistrict", Types.VARCHAR },
            { "parentPin", Types.VARCHAR },
            { "parentPhone", Types.VARCHAR },
            { "parentMail", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table StudentPortlet_Address (addressId LONG not null primary key,studentId LONG,groupId LONG,parentAddress VARCHAR(75) null,parentState VARCHAR(75) null,parentDistrict VARCHAR(75) null,parentPin VARCHAR(75) null,parentPhone VARCHAR(75) null,parentMail VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table StudentPortlet_Address";
    public static final String ORDER_BY_JPQL = " ORDER BY address.addressId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY StudentPortlet_Address.addressId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.net.opentrends.register.model.Address"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.net.opentrends.register.model.Address"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.net.opentrends.register.model.Address"),
            true);
    public static long GROUPID_COLUMN_BITMASK = 1L;
    public static long ADDRESSID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.net.opentrends.register.model.Address"));
    private static ClassLoader _classLoader = Address.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Address.class
        };
    private long _addressId;
    private long _studentId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private String _parentAddress;
    private String _parentState;
    private String _parentDistrict;
    private String _parentPin;
    private String _parentPhone;
    private String _parentMail;
    private long _columnBitmask;
    private Address _escapedModel;

    public AddressModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _addressId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setAddressId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _addressId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Address.class;
    }

    @Override
    public String getModelClassName() {
        return Address.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("addressId", getAddressId());
        attributes.put("studentId", getStudentId());
        attributes.put("groupId", getGroupId());
        attributes.put("parentAddress", getParentAddress());
        attributes.put("parentState", getParentState());
        attributes.put("parentDistrict", getParentDistrict());
        attributes.put("parentPin", getParentPin());
        attributes.put("parentPhone", getParentPhone());
        attributes.put("parentMail", getParentMail());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long addressId = (Long) attributes.get("addressId");

        if (addressId != null) {
            setAddressId(addressId);
        }

        Long studentId = (Long) attributes.get("studentId");

        if (studentId != null) {
            setStudentId(studentId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        String parentAddress = (String) attributes.get("parentAddress");

        if (parentAddress != null) {
            setParentAddress(parentAddress);
        }

        String parentState = (String) attributes.get("parentState");

        if (parentState != null) {
            setParentState(parentState);
        }

        String parentDistrict = (String) attributes.get("parentDistrict");

        if (parentDistrict != null) {
            setParentDistrict(parentDistrict);
        }

        String parentPin = (String) attributes.get("parentPin");

        if (parentPin != null) {
            setParentPin(parentPin);
        }

        String parentPhone = (String) attributes.get("parentPhone");

        if (parentPhone != null) {
            setParentPhone(parentPhone);
        }

        String parentMail = (String) attributes.get("parentMail");

        if (parentMail != null) {
            setParentMail(parentMail);
        }
    }

    @Override
    public long getAddressId() {
        return _addressId;
    }

    @Override
    public void setAddressId(long addressId) {
        _addressId = addressId;
    }

    @Override
    public long getStudentId() {
        return _studentId;
    }

    @Override
    public void setStudentId(long studentId) {
        _studentId = studentId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @Override
    public String getParentAddress() {
        if (_parentAddress == null) {
            return StringPool.BLANK;
        } else {
            return _parentAddress;
        }
    }

    @Override
    public void setParentAddress(String parentAddress) {
        _parentAddress = parentAddress;
    }

    @Override
    public String getParentState() {
        if (_parentState == null) {
            return StringPool.BLANK;
        } else {
            return _parentState;
        }
    }

    @Override
    public void setParentState(String parentState) {
        _parentState = parentState;
    }

    @Override
    public String getParentDistrict() {
        if (_parentDistrict == null) {
            return StringPool.BLANK;
        } else {
            return _parentDistrict;
        }
    }

    @Override
    public void setParentDistrict(String parentDistrict) {
        _parentDistrict = parentDistrict;
    }

    @Override
    public String getParentPin() {
        if (_parentPin == null) {
            return StringPool.BLANK;
        } else {
            return _parentPin;
        }
    }

    @Override
    public void setParentPin(String parentPin) {
        _parentPin = parentPin;
    }

    @Override
    public String getParentPhone() {
        if (_parentPhone == null) {
            return StringPool.BLANK;
        } else {
            return _parentPhone;
        }
    }

    @Override
    public void setParentPhone(String parentPhone) {
        _parentPhone = parentPhone;
    }

    @Override
    public String getParentMail() {
        if (_parentMail == null) {
            return StringPool.BLANK;
        } else {
            return _parentMail;
        }
    }

    @Override
    public void setParentMail(String parentMail) {
        _parentMail = parentMail;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Address.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Address toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Address) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        AddressImpl addressImpl = new AddressImpl();

        addressImpl.setAddressId(getAddressId());
        addressImpl.setStudentId(getStudentId());
        addressImpl.setGroupId(getGroupId());
        addressImpl.setParentAddress(getParentAddress());
        addressImpl.setParentState(getParentState());
        addressImpl.setParentDistrict(getParentDistrict());
        addressImpl.setParentPin(getParentPin());
        addressImpl.setParentPhone(getParentPhone());
        addressImpl.setParentMail(getParentMail());

        addressImpl.resetOriginalValues();

        return addressImpl;
    }

    @Override
    public int compareTo(Address address) {
        long primaryKey = address.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Address)) {
            return false;
        }

        Address address = (Address) obj;

        long primaryKey = address.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        AddressModelImpl addressModelImpl = this;

        addressModelImpl._originalGroupId = addressModelImpl._groupId;

        addressModelImpl._setOriginalGroupId = false;

        addressModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Address> toCacheModel() {
        AddressCacheModel addressCacheModel = new AddressCacheModel();

        addressCacheModel.addressId = getAddressId();

        addressCacheModel.studentId = getStudentId();

        addressCacheModel.groupId = getGroupId();

        addressCacheModel.parentAddress = getParentAddress();

        String parentAddress = addressCacheModel.parentAddress;

        if ((parentAddress != null) && (parentAddress.length() == 0)) {
            addressCacheModel.parentAddress = null;
        }

        addressCacheModel.parentState = getParentState();

        String parentState = addressCacheModel.parentState;

        if ((parentState != null) && (parentState.length() == 0)) {
            addressCacheModel.parentState = null;
        }

        addressCacheModel.parentDistrict = getParentDistrict();

        String parentDistrict = addressCacheModel.parentDistrict;

        if ((parentDistrict != null) && (parentDistrict.length() == 0)) {
            addressCacheModel.parentDistrict = null;
        }

        addressCacheModel.parentPin = getParentPin();

        String parentPin = addressCacheModel.parentPin;

        if ((parentPin != null) && (parentPin.length() == 0)) {
            addressCacheModel.parentPin = null;
        }

        addressCacheModel.parentPhone = getParentPhone();

        String parentPhone = addressCacheModel.parentPhone;

        if ((parentPhone != null) && (parentPhone.length() == 0)) {
            addressCacheModel.parentPhone = null;
        }

        addressCacheModel.parentMail = getParentMail();

        String parentMail = addressCacheModel.parentMail;

        if ((parentMail != null) && (parentMail.length() == 0)) {
            addressCacheModel.parentMail = null;
        }

        return addressCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{addressId=");
        sb.append(getAddressId());
        sb.append(", studentId=");
        sb.append(getStudentId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", parentAddress=");
        sb.append(getParentAddress());
        sb.append(", parentState=");
        sb.append(getParentState());
        sb.append(", parentDistrict=");
        sb.append(getParentDistrict());
        sb.append(", parentPin=");
        sb.append(getParentPin());
        sb.append(", parentPhone=");
        sb.append(getParentPhone());
        sb.append(", parentMail=");
        sb.append(getParentMail());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("net.opentrends.register.model.Address");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>addressId</column-name><column-value><![CDATA[");
        sb.append(getAddressId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>studentId</column-name><column-value><![CDATA[");
        sb.append(getStudentId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentAddress</column-name><column-value><![CDATA[");
        sb.append(getParentAddress());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentState</column-name><column-value><![CDATA[");
        sb.append(getParentState());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentDistrict</column-name><column-value><![CDATA[");
        sb.append(getParentDistrict());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentPin</column-name><column-value><![CDATA[");
        sb.append(getParentPin());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentPhone</column-name><column-value><![CDATA[");
        sb.append(getParentPhone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentMail</column-name><column-value><![CDATA[");
        sb.append(getParentMail());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
